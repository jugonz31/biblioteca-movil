Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _reactNative = require('react-native');

var ThreeAxisSensor = function () {
  function ThreeAxisSensor(nativeSensorModule, nativeEventName) {
    babelHelpers.classCallCheck(this, ThreeAxisSensor);

    this._nativeModule = nativeSensorModule;
    this._nativeEmitter = new _reactNative.NativeEventEmitter(nativeSensorModule);
    this._nativeEventName = nativeEventName;
  }

  babelHelpers.createClass(ThreeAxisSensor, [{
    key: 'hasListeners',
    value: function hasListeners() {
      return this.getListenerCount() > 0;
    }
  }, {
    key: 'getListenerCount',
    value: function getListenerCount() {
      return this._nativeEmitter.listeners(this._nativeEventName).length;
    }
  }, {
    key: 'addListener',
    value: function addListener(listener) {
      var _this = this;

      if (_reactNative.Platform.OS === 'android') {
        if (!this.hasListeners()) {
          this._nativeModule.startObserving();
        }
      }

      var subscription = this._nativeEmitter.addListener(this._nativeEventName, listener);
      subscription.remove = function () {
        return _this.removeSubscription(subscription);
      };
      return subscription;
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      if (_reactNative.Platform.OS === 'android') {
        this._nativeModule.stopObserving();
      }

      return this._nativeEmitter.removeAllListeners(this._nativeEventName);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (_reactNative.Platform.OS === 'android') {
        if (this.getListenerCount() === 1) {
          this._nativeModule.stopObserving();
        }
      }

      return this._nativeEmitter.removeSubscription(subscription);
    }
  }, {
    key: 'setUpdateInterval',
    value: function setUpdateInterval(intervalMs) {
      this._nativeModule.setUpdateInterval(intervalMs);
    }
  }]);
  return ThreeAxisSensor;
}();

exports.default = ThreeAxisSensor;