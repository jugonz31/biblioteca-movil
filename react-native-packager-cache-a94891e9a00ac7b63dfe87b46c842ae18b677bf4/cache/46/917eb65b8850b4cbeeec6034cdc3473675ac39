Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BorderlessButton = exports.RectButton = exports.BaseButton = exports.RawButton = exports.State = exports.RotationGestureHandler = exports.PinchGestureHandler = exports.PanGestureHandler = exports.LongPressGestureHandler = exports.TapGestureHandler = exports.NativeViewGestureHandler = exports.WebView = exports.DrawerLayoutAndroid = exports.ViewPagerAndroid = exports.ToolbarAndroid = exports.TextInput = exports.Switch = exports.Slider = exports.ScrollView = undefined;

var _jsxFileName = '/home/stiven/BibliotecaMovil/node_modules/react-native-gesture-handler/GestureHandler.js',
    _class3,
    _temp3,
    _class4,
    _temp4,
    _class5,
    _temp5;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _areEqual = require('fbjs/lib/areEqual');

var _areEqual2 = babelHelpers.interopRequireDefault(_areEqual);

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var RNGestureHandlerModule = _reactNative.NativeModules.RNGestureHandlerModule;

var UIManager = _reactNative.NativeModules.UIManager;
var oldSetJSResponder = UIManager.setJSResponder,
    oldClearJSResponder = UIManager.clearJSResponder;

UIManager.setJSResponder = function (tag, blockNativeResponder) {
  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);
  oldSetJSResponder(tag, blockNativeResponder);
};
UIManager.clearJSResponder = function () {
  RNGestureHandlerModule.handleClearJSResponder();
  oldClearJSResponder();
};

var State = RNGestureHandlerModule.State;

var handlerTag = 1;
var handlerIDToTag = {};

var GestureHandlerPropTypes = {
  id: _propTypes2.default.string,
  waitFor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
  simultaneousHandlers: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
  shouldCancelWhenOutside: _propTypes2.default.bool,
  hitSlop: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    left: _propTypes2.default.number,
    top: _propTypes2.default.number,
    right: _propTypes2.default.number,
    bottom: _propTypes2.default.number,
    vertical: _propTypes2.default.number,
    horizontal: _propTypes2.default.number
  })]),
  onGestureEvent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object]),
  onHandlerStateChange: _propTypes2.default.func
};

function canUseNativeParam(param) {
  return param !== undefined && typeof param !== 'function' && (typeof param !== 'object' || !('__isNative' in param));
}

function transformIntoHandlerTags(handlerIDs) {
  if (!Array.isArray(handlerIDs)) {
    handlerIDs = [handlerIDs];
  }

  return handlerIDs.map(function (handlerID) {
    return handlerIDToTag[handlerID] || -1;
  }).filter(function (handlerTag) {
    return handlerTag > 0;
  });
}

function filterConfig(props, validProps) {
  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var res = babelHelpers.extends({}, defaults);
  Object.keys(validProps).forEach(function (key) {
    var value = props[key];
    if (canUseNativeParam(value)) {
      var _value = props[key];
      if (key === 'simultaneousHandlers' || key === 'waitFor') {
        _value = transformIntoHandlerTags(props[key]);
      }
      res[key] = _value;
    }
  });
  return res;
}

function createHandler(handlerName) {
  var _class, _temp;

  var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var Handler = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Handler, _React$Component);

    function Handler(props) {
      babelHelpers.classCallCheck(this, Handler);

      var _this = babelHelpers.possibleConstructorReturn(this, (Handler.__proto__ || Object.getPrototypeOf(Handler)).call(this, props));

      _this._onGestureHandlerEvent = function (event) {
        if (event.nativeEvent.handlerTag === _this._handlerTag) {
          _this.props.onGestureEvent && _this.props.onGestureEvent(event);
        } else {
          _this.props.onGestureHandlerEvent && _this.props.onGestureHandlerEvent(event);
        }
      };

      _this._onGestureHandlerStateChange = function (event) {
        if (event.nativeEvent.handlerTag === _this._handlerTag) {
          _this.props.onHandlerStateChange && _this.props.onHandlerStateChange(event);
        } else {
          _this.props.onGestureHandlerStateChange && _this.props.onGestureHandlerStateChange(event);
        }
      };

      _this._refHandler = function (node) {
        _this._viewNode = node;

        var child = _react2.default.Children.only(_this.props.children);
        var ref = child.ref;

        if (typeof ref === 'function') {
          ref(node);
        }
      };

      _this._handlerTag = handlerTag++;
      _this._config = {};
      if (props.id) {
        if (handlerIDToTag[props.id] !== undefined) {
          throw new Error('Handler with ID "' + props.id + '" already registered');
        }
        handlerIDToTag[props.id] = _this._handlerTag;
      }
      return _this;
    }

    babelHelpers.createClass(Handler, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        RNGestureHandlerModule.dropGestureHandler(this._handlerTag);
        if (this.props.id) {
          delete handlerIDToTag[this.props.id];
        }
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);
        this._config = filterConfig(this.props, this.constructor.propTypes, config);
        RNGestureHandlerModule.createGestureHandler(handlerName, this._handlerTag, this._config);
        RNGestureHandlerModule.attachGestureHandler(this._handlerTag, this._viewTag);
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps, prevState) {
        var viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);
        if (this._viewTag !== viewTag) {
          this._viewTag = viewTag;
          RNGestureHandlerModule.attachGestureHandler(this._handlerTag, viewTag);
        }

        var newConfig = filterConfig(this.props, this.constructor.propTypes, config);
        if (!(0, _areEqual2.default)(this._config, newConfig)) {
          this._config = newConfig;
          RNGestureHandlerModule.updateGestureHandler(this._handlerTag, this._config);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var gestureEventHandler = this._onGestureHandlerEvent;
        var _props = this.props,
            onGestureEvent = _props.onGestureEvent,
            onGestureHandlerEvent = _props.onGestureHandlerEvent;

        if (onGestureEvent && typeof onGestureEvent !== 'function') {
          if (onGestureHandlerEvent) {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
          gestureEventHandler = this.props.onGestureEvent;
        } else {
          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
            throw new Error('Nesting touch handlers with native animated driver is not supported yet');
          }
        }
        var child = _react2.default.Children.only(this.props.children);
        return _react2.default.cloneElement(child, {
          ref: this._refHandler,
          collapsable: false,
          onGestureHandlerEvent: gestureEventHandler,
          onGestureHandlerStateChange: this._onGestureHandlerStateChange
        });
      }
    }]);
    return Handler;
  }(_react2.default.Component), _class.propTypes = babelHelpers.extends({}, GestureHandlerPropTypes, propTypes), _temp);

  return Handler;
}

var NativeViewGestureHandler = createHandler('NativeViewGestureHandler', {
  shouldActivateOnStart: _propTypes2.default.bool,
  disallowInterruption: _propTypes2.default.bool
});
var TapGestureHandler = createHandler('TapGestureHandler', {
  maxDurationMs: _propTypes2.default.number,
  maxDelayMs: _propTypes2.default.number,
  numberOfTaps: _propTypes2.default.number
}, {});
var LongPressGestureHandler = createHandler('LongPressGestureHandler', {
  minDurationMs: _propTypes2.default.number
}, {});
var PanGestureHandler = createHandler('PanGestureHandler', {
  minDeltaX: _propTypes2.default.number,
  minDeltaY: _propTypes2.default.number,
  maxDeltaX: _propTypes2.default.number,
  maxDeltaY: _propTypes2.default.number,
  minOffsetX: _propTypes2.default.number,
  minOffsetY: _propTypes2.default.number,
  minDist: _propTypes2.default.number,
  minVelocity: _propTypes2.default.number,
  minVelocityX: _propTypes2.default.number,
  minVelocityY: _propTypes2.default.number,
  minPointers: _propTypes2.default.number,
  maxPointers: _propTypes2.default.number,
  avgTouches: _propTypes2.default.bool
}, {});
var PinchGestureHandler = createHandler('PinchGestureHandler', {}, {});
var RotationGestureHandler = createHandler('RotationGestureHandler', {}, {});

function createNativeWrapper(Component) {
  var _class2, _temp2;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var ComponentWrapper = (_temp2 = _class2 = function (_React$Component2) {
    babelHelpers.inherits(ComponentWrapper, _React$Component2);

    function ComponentWrapper(props) {
      babelHelpers.classCallCheck(this, ComponentWrapper);

      var _this2 = babelHelpers.possibleConstructorReturn(this, (ComponentWrapper.__proto__ || Object.getPrototypeOf(ComponentWrapper)).call(this, props));

      _this2._refHandler = function (node) {
        _this2._viewNode = node;

        for (var methodName in node) {
          if (methodName === 'replaceState' || methodName === 'isMounted') {
            continue;
          }
          var method = node[methodName];
          if (!methodName.startsWith('_') && typeof method === 'function' && _this2[methodName] === undefined) {
            _this2[methodName] = method;
          }
        }
      };

      _this2._handlerTag = handlerTag++;
      _this2._config = {};
      if (props.id) {
        if (handlerIDToTag[props.id] !== undefined) {
          throw new Error('Handler with ID "' + props.id + '" already registered');
        }
        handlerIDToTag[props.id] = _this2._handlerTag;
      }
      return _this2;
    }

    babelHelpers.createClass(ComponentWrapper, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        RNGestureHandlerModule.dropGestureHandler(this._handlerTag);
        if (this.props.id) {
          delete handlerIDToTag[this.props.id];
        }
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);
        this._config = filterConfig(this.props, NativeViewGestureHandler.propTypes, config);
        RNGestureHandlerModule.createGestureHandler('NativeViewGestureHandler', this._handlerTag, this._config);
        RNGestureHandlerModule.attachGestureHandler(this._handlerTag, this._viewTag);
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps, prevState) {
        var viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);
        if (this._viewTag !== viewTag) {
          this._viewTag = viewTag;
          RNGestureHandlerModule.attachGestureHandler(this._handlerTag, viewTag);
        }

        var newConfig = filterConfig(this.props, NativeViewGestureHandler.propTypes, config);
        if (!(0, _areEqual2.default)(this._config, newConfig)) {
          this._config = newConfig;
          RNGestureHandlerModule.updateGestureHandler(viewTag, this._handlerTag, this._config);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _props2 = this.props,
            onGestureEvent = _props2.onGestureEvent,
            onHandlerStateChange = _props2.onHandlerStateChange,
            rest = babelHelpers.objectWithoutProperties(_props2, ['onGestureEvent', 'onHandlerStateChange']);

        return _react2.default.createElement(Component, babelHelpers.extends({}, rest, {
          onGestureHandlerEvent: onGestureEvent,
          onGestureHandlerStateChange: onHandlerStateChange,
          ref: this._refHandler,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 361
          }
        }));
      }
    }]);
    return ComponentWrapper;
  }(_react2.default.Component), _class2.propTypes = babelHelpers.extends({}, NativeViewGestureHandler.propTypes, Component.propTypes), _temp2);

  return ComponentWrapper;
}

var WrappedScrollView = createNativeWrapper(_reactNative.ScrollView, {
  disallowInterruption: true
});
var WrappedSlider = createNativeWrapper(_reactNative.Slider, {
  shouldCancelWhenOutside: false,
  shouldActivateOnStart: true,
  disallowInterruption: true
});
var WrappedSwitch = createNativeWrapper(_reactNative.Switch, {
  shouldCancelWhenOutside: false,
  shouldActivateOnStart: true,
  disallowInterruption: true
});
var WrappedTextInput = createNativeWrapper(_reactNative.TextInput);
var WrappedWebView = createNativeWrapper(_reactNative.WebView);

var WrappedToolbarAndroid = createNativeWrapper(_reactNative.ToolbarAndroid);
var WrappedViewPagerAndroid = createNativeWrapper(_reactNative.ViewPagerAndroid, {
  disallowInterruption: true
});
var WrappedDrawerLayoutAndroid = createNativeWrapper(_reactNative.DrawerLayoutAndroid, {
  disallowInterruption: true
});
WrappedDrawerLayoutAndroid.positions = _reactNative.DrawerLayoutAndroid.positions;

State.print = function (state) {
  var keys = Object.keys(State);
  for (var i = 0; i < keys.length; i++) {
    if (state === State[keys[i]]) {
      return keys[i];
    }
  }
};

var RawButton = createNativeWrapper((0, _reactNative.requireNativeComponent)('RNGestureHandlerButton', null), {
  shouldCancelWhenOutside: false,
  shouldActivateOnStart: false
});

var BaseButton = (_temp3 = _class3 = function (_React$Component3) {
  babelHelpers.inherits(BaseButton, _React$Component3);

  function BaseButton(props) {
    babelHelpers.classCallCheck(this, BaseButton);

    var _this3 = babelHelpers.possibleConstructorReturn(this, (BaseButton.__proto__ || Object.getPrototypeOf(BaseButton)).call(this, props));

    _this3._onHandlerEvent = function (e) {
      var _e$nativeEvent = e.nativeEvent,
          state = _e$nativeEvent.state,
          oldState = _e$nativeEvent.oldState,
          pointerInside = _e$nativeEvent.pointerInside;

      var active = pointerInside && state === State.ACTIVE;
      if (active != _this3._lastActive) {
        _this3.props.onActiveStateChange && _this3.props.onActiveStateChange(active);
      }
      if (oldState === State.ACTIVE && state !== State.CANCELLED && _this3._lastActive) {
        _this3.props.onPress && _this3.props.onPress(active);
      }
      _this3._lastActive = active;
    };

    _this3._lastActive = false;
    return _this3;
  }

  babelHelpers.createClass(BaseButton, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(RawButton, babelHelpers.extends({}, this.props, {
        onHandlerStateChange: this._onHandlerEvent,
        onGestureEvent: this._onHandlerEvent,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 440
        }
      }));
    }
  }]);
  return BaseButton;
}(_react2.default.Component), _class3.propTypes = RawButton.propTypes, _temp3);


var AnimatedBaseButton = _reactNative.Animated.createAnimatedComponent(BaseButton);

var btnStyles = _reactNative.StyleSheet.create({
  underlay: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    top: 0
  }
});

var RectButton = (_temp4 = _class4 = function (_React$Component4) {
  babelHelpers.inherits(RectButton, _React$Component4);

  function RectButton(props) {
    babelHelpers.classCallCheck(this, RectButton);

    var _this4 = babelHelpers.possibleConstructorReturn(this, (RectButton.__proto__ || Object.getPrototypeOf(RectButton)).call(this, props));

    _this4._handleActiveStateChange = _reactNative.Platform.OS === 'android' ? null : function (active) {
      _this4._opacity.setValue(active ? _this4.props.activeOpacity : 0);
    };

    _this4._opacity = new _reactNative.Animated.Value(0);
    return _this4;
  }

  babelHelpers.createClass(RectButton, [{
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          children = _props3.children,
          rest = babelHelpers.objectWithoutProperties(_props3, ['children']);

      return _react2.default.createElement(
        BaseButton,
        babelHelpers.extends({}, rest, { onActiveStateChange: this._handleActiveStateChange, __source: {
            fileName: _jsxFileName,
            lineNumber: 479
          }
        }),
        _react2.default.createElement(_reactNative.Animated.View, {
          style: [btnStyles.underlay, { backgroundColor: this.props.underlayColor }, { opacity: this._opacity }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 480
          }
        }),
        children
      );
    }
  }]);
  return RectButton;
}(_react2.default.Component), _class4.propTypes = BaseButton.propTypes, _class4.defaultProps = {
  activeOpacity: 0.105,
  underlayColor: 'black'
}, _temp4);
var BorderlessButton = (_temp5 = _class5 = function (_React$Component5) {
  babelHelpers.inherits(BorderlessButton, _React$Component5);

  function BorderlessButton(props) {
    babelHelpers.classCallCheck(this, BorderlessButton);

    var _this5 = babelHelpers.possibleConstructorReturn(this, (BorderlessButton.__proto__ || Object.getPrototypeOf(BorderlessButton)).call(this, props));

    _this5._handleActiveStateChange = _reactNative.Platform.OS === 'android' ? null : function (active) {
      _this5._opacity.setValue(active ? _this5.props.activeOpacity : 1);
    };

    _this5._opacity = new _reactNative.Animated.Value(1);
    return _this5;
  }

  babelHelpers.createClass(BorderlessButton, [{
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          children = _props4.children,
          style = _props4.style,
          rest = babelHelpers.objectWithoutProperties(_props4, ['children', 'style']);

      return _react2.default.createElement(
        AnimatedBaseButton,
        babelHelpers.extends({
          borderless: true
        }, rest, {
          onActiveStateChange: this._handleActiveStateChange,
          style: [style, _reactNative.Platform.OS === 'ios' && { opacity: this._opacity }], __source: {
            fileName: _jsxFileName,
            lineNumber: 510
          }
        }),
        children
      );
    }
  }]);
  return BorderlessButton;
}(_react2.default.Component), _class5.propTypes = BaseButton.propTypes, _class5.defaultProps = {
  activeOpacity: 0.3
}, _temp5);
exports.ScrollView = WrappedScrollView;
exports.Slider = WrappedSlider;
exports.Switch = WrappedSwitch;
exports.TextInput = WrappedTextInput;
exports.ToolbarAndroid = WrappedToolbarAndroid;
exports.ViewPagerAndroid = WrappedViewPagerAndroid;
exports.DrawerLayoutAndroid = WrappedDrawerLayoutAndroid;
exports.WebView = WrappedWebView;
exports.NativeViewGestureHandler = NativeViewGestureHandler;
exports.TapGestureHandler = TapGestureHandler;
exports.LongPressGestureHandler = LongPressGestureHandler;
exports.PanGestureHandler = PanGestureHandler;
exports.PinchGestureHandler = PinchGestureHandler;
exports.RotationGestureHandler = RotationGestureHandler;
exports.State = State;
exports.RawButton = RawButton;
exports.BaseButton = BaseButton;
exports.RectButton = RectButton;
exports.BorderlessButton = BorderlessButton;