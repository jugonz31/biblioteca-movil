Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteValueWithKeyAsync = deleteValueWithKeyAsync;
exports.getValueWithKeyAsync = getValueWithKeyAsync;
exports.setValueWithKeyAsync = setValueWithKeyAsync;

var _reactNative = require('react-native');

var regeneratorRuntime = require('regenerator-runtime');

var ExponentSecureStore = _reactNative.NativeModules.ExponentSecureStore;


function _keyIsValid(tstString) {
  return tstString.match(/^[\w.-]+$/);
}

function _valueIsValid(tstString) {
  return tstString.match(/^\S*$/);
}

function deleteValueWithKeyAsync(key, options) {
  var _this = this;

  if (!options || typeof options !== 'object') {
    options = {};
  }
  return new Promise(function _callee(resolve, reject) {
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (_keyIsValid(key)) {
              _context.next = 3;
              break;
            }

            throw new Error('Invalid key.');

          case 3:
            _context.next = 5;
            return regeneratorRuntime.awrap(ExponentSecureStore.deleteValueWithKeyAsync(key, options));

          case 5:
            resolve();
            _context.next = 11;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context['catch'](0);

            reject(_context.t0);

          case 11:
          case 'end':
            return _context.stop();
        }
      }
    }, null, _this, [[0, 8]]);
  });
}

function getValueWithKeyAsync(key, options) {
  var _this2 = this;

  if (!options || typeof options !== 'object') {
    options = {};
  }
  return new Promise(function _callee2(resolve, reject) {
    var fetchedValue;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;

            if (_keyIsValid(key)) {
              _context2.next = 3;
              break;
            }

            throw new Error('Invalid key. Keys may constain alphanumeric characters, `.`, `-`, and `_`');

          case 3:
            _context2.next = 5;
            return regeneratorRuntime.awrap(ExponentSecureStore.getValueWithKeyAsync(key, options));

          case 5:
            fetchedValue = _context2.sent;

            resolve(fetchedValue);
            _context2.next = 12;
            break;

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2['catch'](0);

            reject(_context2.t0);

          case 12:
          case 'end':
            return _context2.stop();
        }
      }
    }, null, _this2, [[0, 9]]);
  });
}

function setValueWithKeyAsync(value, key, options) {
  var _this3 = this;

  if (!options || typeof options !== 'object') {
    options = {};
  }
  return new Promise(function _callee3(resolve, reject) {
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;

            if (_keyIsValid(key)) {
              _context3.next = 3;
              break;
            }

            throw new Error('Invalid key. Keys may constain alphanumeric characters, `.`, `-`, and `_`');

          case 3:
            if (_valueIsValid(value)) {
              _context3.next = 5;
              break;
            }

            throw new Error('Invalid key. Keys may not contain white space.');

          case 5:
            _context3.next = 7;
            return regeneratorRuntime.awrap(ExponentSecureStore.setValueWithKeyAsync(value, key, options));

          case 7:
            resolve();
            _context3.next = 13;
            break;

          case 10:
            _context3.prev = 10;
            _context3.t0 = _context3['catch'](0);

            reject(_context3.t0);

          case 13:
          case 'end':
            return _context3.stop();
        }
      }
    }, null, _this3, [[0, 10]]);
  });
}