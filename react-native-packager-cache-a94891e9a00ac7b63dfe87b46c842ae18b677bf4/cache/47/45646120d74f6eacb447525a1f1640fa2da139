Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.channel = undefined;

var _class,
    _temp2,
    _jsxFileName = '/home/stiven/BibliotecaMovil/node_modules/expo/src/Modal/ModalHost.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _PureContainer = require('./PureContainer');

var _PureContainer2 = babelHelpers.interopRequireDefault(_PureContainer);

var channel = exports.channel = '__$expo_modal_host';

var ModalHost = (_temp2 = _class = function (_Component) {
  babelHelpers.inherits(ModalHost, _Component);

  function ModalHost() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, ModalHost);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ModalHost.__proto__ || Object.getPrototypeOf(ModalHost)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      modals: [],
      layout: {
        height: 0,
        width: 0,
        measured: false
      }
    }, _this._currentKey = 0, _this._register = function (renderer) {
      var key = _this._currentKey;

      _this._currentKey++;
      _this.setState(function (state) {
        return {
          modals: [].concat(babelHelpers.toConsumableArray(state.modals), [{ key: key, renderer: renderer }])
        };
      });

      var update = function update(r) {
        return _this.setState(function (state) {
          return {
            modals: state.modals.map(function (m) {
              return m.key === key ? { key: key, renderer: r } : m;
            })
          };
        });
      };

      var remove = function remove() {
        return _this.setState(function (state) {
          return {
            modals: state.modals.filter(function (m) {
              return m.key !== key;
            })
          };
        });
      };

      return {
        update: update,
        remove: remove
      };
    }, _this._handleLayout = function (e) {
      var layout = e.nativeEvent.layout;

      if (layout.height !== _this.state.layout.height || layout.width !== _this.state.layout.width) {
        _this.setState({ layout: babelHelpers.extends({}, e.nativeEvent.layout, { measured: true }) });
      }
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(ModalHost, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return babelHelpers.defineProperty({}, channel, {
        register: this._register
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.host, onLayout: this._handleLayout, __source: {
            fileName: _jsxFileName,
            lineNumber: 96
          }
        },
        _react2.default.createElement(
          _PureContainer2.default,
          babelHelpers.extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 97
            }
          }),
          this.props.children
        ),
        this.state.layout.measured ? this.state.modals.map(function (_ref3) {
          var key = _ref3.key,
              renderer = _ref3.renderer;

          return renderer(_this2.state.layout, key);
        }) : null
      );
    }
  }]);
  return ModalHost;
}(_react.Component), _class.childContextTypes = babelHelpers.defineProperty({}, channel, _propTypes2.default.object), _temp2);
exports.default = ModalHost;


var styles = _reactNative.StyleSheet.create({
  host: {
    flex: 1
  }
});