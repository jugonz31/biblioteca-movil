Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Constants = exports.default = undefined;

var _class,
    _temp,
    _jsxFileName = '/home/stiven/BibliotecaMovil/node_modules/expo/src/Camera.js';

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var regeneratorRuntime = require('regenerator-runtime');

var CameraManager = _reactNative.NativeModules.ExponentCameraManager || _reactNative.NativeModules.ExponentCameraModule;

function convertNativeProps(props) {
  var newProps = babelHelpers.extends({}, props);
  if (typeof props.flashMode === 'string') {
    newProps.flashMode = Camera.Constants.FlashMode[props.flashMode];
  }

  if (typeof props.type === 'string') {
    newProps.type = Camera.Constants.Type[props.type];
  }

  if (typeof props.autoFocus === 'string') {
    newProps.autoFocus = Camera.Constants.AutoFocus[props.autoFocus];
  }

  if (typeof props.whiteBalance === 'string') {
    newProps.whiteBalance = Camera.Constants.WhiteBalance[props.whiteBalance];
  }

  newProps.onCameraReadyNative = this._nativeOnCameraReady;

  if (_reactNative.Platform.OS === 'ios') {
    delete newProps.ratio;
  }

  return newProps;
}

var Camera = (_temp = _class = function (_React$Component) {
  babelHelpers.inherits(Camera, _React$Component);

  function Camera() {
    babelHelpers.classCallCheck(this, Camera);
    return babelHelpers.possibleConstructorReturn(this, (Camera.__proto__ || Object.getPrototypeOf(Camera)).apply(this, arguments));
  }

  babelHelpers.createClass(Camera, [{
    key: 'takePictureAsync',
    value: function takePictureAsync() {
      return regeneratorRuntime.async(function takePictureAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(CameraManager.takePicture());

            case 2:
              return _context.abrupt('return', _context.sent);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'getSupportedRatiosAsync',
    value: function getSupportedRatiosAsync() {
      return regeneratorRuntime.async(function getSupportedRatiosAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_reactNative.Platform.OS === 'android')) {
                _context2.next = 6;
                break;
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(CameraManager.getSupportedRatios());

            case 3:
              return _context2.abrupt('return', _context2.sent);

            case 6:
              throw new Error('Ratio is not supported on iOS');

            case 7:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'takePicture',
    value: function takePicture() {
      console.warn('Call takePictureAsync instead of takePicture. This method will be removed in SDK 22.');
      return this.takePictureAsync();
    }
  }, {
    key: 'getSupportedRatios',
    value: function getSupportedRatios() {
      console.warn('Call getSupportedRatiosAsync instead of getSupportedRatios. This method will be removed in SDK 22.');
      return this.getSupportedRatiosAsync();
    }
  }, {
    key: '_nativeOnCameraReady',
    value: function _nativeOnCameraReady() {
      if (this.props.onCameraReady) {
        this.props.onCameraReady();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var nativeProps = convertNativeProps(this.props);

      return _react2.default.createElement(ExponentCamera, babelHelpers.extends({}, nativeProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 109
        }
      }));
    }
  }]);
  return Camera;
}(_react2.default.Component), _class.Constants = {
  Type: CameraManager.Type,
  FlashMode: CameraManager.FlashMode,
  AutoFocus: CameraManager.AutoFocus,
  WhiteBalance: CameraManager.WhiteBalance
}, _class.propTypes = babelHelpers.extends({}, _reactNative.ViewPropTypes, {
  onCameraReady: _propTypes2.default.func,
  flashMode: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  type: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  ratio: _propTypes2.default.string,
  autoFocus: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.number]),
  focusDepth: _propTypes2.default.number,
  zoom: _propTypes2.default.number,
  whiteBalance: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
}), _class.defaultProps = {
  type: CameraManager.Type.back,
  flashMode: CameraManager.FlashMode.off,
  autoFocus: CameraManager.AutoFocus.on,
  focusDepth: 0,
  ratio: '4:3',
  zoom: 0,
  whiteBalance: CameraManager.WhiteBalance.auto
}, _temp);
exports.default = Camera;
var Constants = exports.Constants = Camera.Constants;

var ExponentCamera = (0, _reactNative.requireNativeComponent)('ExponentCamera', Camera, {
  nativeOnly: {
    onCameraReadyNative: true
  }
});